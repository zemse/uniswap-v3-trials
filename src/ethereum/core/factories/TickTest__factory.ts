/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TickTest, TickTestInterface } from "../TickTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickLower",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickUpper",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "tickCurrent",
        type: "int24",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthGlobal1X128",
        type: "uint256",
      },
    ],
    name: "getFeeGrowthInside",
    outputs: [
      {
        internalType: "uint256",
        name: "feeGrowthInside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthInside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside0X128",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeGrowthOutside1X128",
            type: "uint256",
          },
        ],
        internalType: "struct Tick.Info",
        name: "info",
        type: "tuple",
      },
    ],
    name: "setTick",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tickSpacing",
        type: "int24",
      },
    ],
    name: "tickSpacingToMaxLiquidityPerTick",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    name: "ticks",
    outputs: [
      {
        internalType: "uint128",
        name: "liquidityGross",
        type: "uint128",
      },
      {
        internalType: "int128",
        name: "liquidityNet",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside0X128",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeGrowthOutside1X128",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061043f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806330e3ff4c1461005157806382ab85fb1461007b57806382c66f8714610090578063f30dba93146100b0575b600080fd5b61006461005f3660046102f0565b6100d3565b604051610072929190610424565b60405180910390f35b61008e610089366004610344565b6100f2565b005b6100a361009e3660046102cf565b61015e565b60405161007291906103e7565b6100c36100be3660046102cf565b610171565b60405161007294939291906103fb565b6000806100e48188888888886101a7565b915091509550959350505050565b600291820b820b600090815260208181526040918290208351815492850151600f0b6001600160801b03908116600160801b029181166fffffffffffffffffffffffffffffffff1990941693909317909216919091178155908201516001820155606090910151910155565b600061016982610253565b90505b919050565b6000602081905290815260409020805460018201546002909201546001600160801b03821692600160801b909204600f0b919084565b600285810b80820b60009081526020899052604080822088850b850b83529082209193849391929184918291908a900b126101ed57505060018201546002830154610200565b8360010154880391508360020154870390505b6000808b60020b8b60020b121561022257505060018301546002840154610235565b84600101548a0391508460020154890390505b92909803979097039b96909503949094039850939650505050505050565b60008082600281900b620d89e7198161026857fe5b05029050600083600281900b620d89e88161027f57fe5b0502905060008460020b83830360020b8161029657fe5b0560010190508062ffffff166001600160801b038016816102b357fe5b0495945050505050565b8035600281900b811461016c57600080fd5b6000602082840312156102e0578081fd5b6102e9826102bd565b9392505050565b600080600080600060a08688031215610307578081fd5b610310866102bd565b945061031e602087016102bd565b935061032c604087016102bd565b94979396509394606081013594506080013592915050565b60008082840360a0811215610357578283fd5b610360846102bd565b92506080601f1982011215610373578182fd5b506040516080810181811067ffffffffffffffff8211171561039157fe5b60405260208401356001600160801b03811681146103ad578283fd5b81526040840135600f81900b81146103c3578283fd5b60208201526060848101356040830152608090940135938101939093525092909150565b6001600160801b0391909116815260200190565b6001600160801b03949094168452600f9290920b60208401526040830152606082015260800190565b91825260208201526040019056fea164736f6c6343000706000a";

export class TickTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TickTest> {
    return super.deploy(overrides || {}) as Promise<TickTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickTest {
    return super.attach(address) as TickTest;
  }
  connect(signer: Signer): TickTest__factory {
    return super.connect(signer) as TickTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickTestInterface {
    return new utils.Interface(_abi) as TickTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickTest {
    return new Contract(address, _abi, signerOrProvider) as TickTest;
  }
}
