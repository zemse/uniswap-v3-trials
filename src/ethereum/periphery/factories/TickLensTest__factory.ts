/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TickLensTest } from "../TickLensTest";

export class TickLensTest__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TickLensTest> {
    return super.deploy(overrides || {}) as Promise<TickLensTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickLensTest {
    return super.attach(address) as TickLensTest;
  }
  connect(signer: Signer): TickLensTest__factory {
    return super.connect(signer) as TickLensTest__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickLensTest {
    return new Contract(address, _abi, signerOrProvider) as TickLensTest;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getGasCostOfGetPopulatedTicksInWord",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tickBitmapIndex",
        type: "int16",
      },
    ],
    name: "getPopulatedTicksInWord",
    outputs: [
      {
        components: [
          {
            internalType: "int24",
            name: "tick",
            type: "int24",
          },
          {
            internalType: "int128",
            name: "liquidityNet",
            type: "int128",
          },
          {
            internalType: "uint128",
            name: "liquidityGross",
            type: "uint128",
          },
        ],
        internalType: "struct ITickLens.PopulatedTick[]",
        name: "populatedTicks",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610523806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063351fb4781461003b578063f0c2e7bc14610064575b600080fd5b61004e610049366004610389565b610084565b60405161005b9190610480565b60405180910390f35b610077610072366004610389565b61034e565b60405161005b919061050d565b606060008373ffffffffffffffffffffffffffffffffffffffff16635339c296846040518263ffffffff1660e01b81526004016100c191906104f1565b60206040518083038186803b1580156100d957600080fd5b505afa1580156100ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101119190610468565b90506000805b61010081101561013b576001811b831615610133576001909101905b600101610117565b5060008573ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561018457600080fd5b505afa158015610198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bc91906103df565b90508167ffffffffffffffff811180156101d557600080fd5b5060405190808252806020026020018201604052801561020f57816020015b6101fc610369565b8152602001906001900390816101f45790505b50935060005b610100811015610344576001811b84161561033c576040517ff30dba93000000000000000000000000000000000000000000000000000000008152600187900b60020b60081b8201830290600090819073ffffffffffffffffffffffffffffffffffffffff8b169063f30dba93906102919086906004016104ff565b60806040518083038186803b1580156102a957600080fd5b505afa1580156102bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e19190610407565b50509150915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508887600190039750878151811061032d57fe5b60200260200101819052505050505b600101610215565b5050505092915050565b6000805a905061035e8484610084565b505a90039392505050565b604080516060810182526000808252602082018190529181019190915290565b6000806040838503121561039b578182fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146103be578283fd5b91506020830135600181900b81146103d4578182fd5b809150509250929050565b6000602082840312156103f0578081fd5b81518060020b8114610400578182fd5b9392505050565b6000806000806080858703121561041c578182fd5b84516fffffffffffffffffffffffffffffffff8116811461043b578283fd5b80945050602085015180600f0b8114610452578283fd5b6040860151606090960151949790965092505050565b600060208284031215610479578081fd5b5051919050565b602080825282518282018190526000919060409081850190868401855b828110156104e4578151805160020b855286810151600f0b878601528501516fffffffffffffffffffffffffffffffff16858501526060909301929085019060010161049d565b5091979650505050505050565b60019190910b815260200190565b60029190910b815260200190565b9081526020019056fea164736f6c6343000706000a";
